name: transaction-middleware

on:
  push:
    branches:
      - main

  release:
    types: [created]

  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
      tags:
        description: "Manual launch"
    
jobs:
  TestBuildAndPublish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Print release information
      run: |
        echo "Release tag: ${{ github.event.release.tag_name }}"
        echo "Release description: ${{ github.event.release.body }}"

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry==1.7.1

    - name: Install project dependencies
      run: |
        poetry --version
        poetry env use python3.12
        poetry export -f requirements.txt --output requirements.txt --with dev --without-hashes
        source $(poetry env info --path)/bin/activate
        pip install -r requirements.txt
        pip install -e .

    - name: Update version
      run: |
        poetry version patch

    - name: Commit and push version update
      run: |
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        git add pyproject.toml
        git commit -m "Update version" || echo "No changes to commit"
        git push origin HEAD

    - name: Run tests
      run: |
        poetry run pytest ./tests

    - name: Build documentation
      run: |
        poetry run sphinx-build docs_source docs

    - name: Commit and push documentation
      run: |
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        git add docs/*
        git commit -m "Update documentation" || echo "No changes to commit"
        git push origin HEAD
          
    - name: Build and publish on pypi
      run: |
        poetry build
        poetry publish --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }}
  